:ruby
  response_weights = []
  if question_rank.question.is_a?(SurveyQuestions::MultipleChoice)
    question_rank.response.survey_question_options.each do |option|
      question_rank.impact.response_impacts.each do |impact|
        if impact.survey_question_option_id == option.id
          response_weights << impact.impact
        end
      end
    end
  elsif question_rank.question.is_a?(SurveyQuestions::Range)
    modifier = question_rank.impact.range_impact_direct_correlation? ? 1 : -1
    response_weights << modifier * question_rank.response.range_response
  end
  
  sum_of_response_weights_term = response_weights.map{|w| number_with_precision(w, precision: 2, strip_insignificant_zeros: true)}.join(' + ')
  
  negative_penalty_term = if question_rank.score < 0.0
    number_with_precision(Recommendations::Engine::NEGATIVE_RANK_PENALTY, precision: 2, strip_insignificant_zeros: true)
  else
    ''
  end
  
  question_weight_term = ''
  if question_rank.impact.question_impact.abs > 0.0
    question_weight_term += number_with_precision(Recommendations::Engine::QUESTION_WEIGHT_BASE, precision: 2, strip_insignificant_zeros: true)
    if question_rank.impact.question_impact.abs != 1.0
      question_weight_term += "<sup>#{number_with_precision(question_rank.impact.question_impact.abs, precision: 2, strip_insignificant_zeros: true)}</sup>".html_safe
    end
  end
  
  if (negative_penalty_term.present? || question_weight_term.present?) && response_weights.many?
    sum_of_response_weights_term = "(#{sum_of_response_weights_term})"
  end
    
  equation = [negative_penalty_term, question_weight_term, sum_of_response_weights_term].select(&:present?).join(' &times; ')


%i impact =
!= equation
